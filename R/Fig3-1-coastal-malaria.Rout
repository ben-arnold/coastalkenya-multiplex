
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> 
> #--------------------------------
> # coastal-malaria.R
> #
> # summarize malaria Ab levels
> # and seroprevalence
> # by age E(Y_ax) and community
> #--------------------------------
> 
> 
> #--------------------------------
> # preamble
> #--------------------------------
> rm(list=ls())
> library(SuperLearner)
Loading required package: nnls
Super Learner
Version: 2.0-22
Package created on 2016-12-10

> library(tmle)
Welcome to the tmle package, version 1.2.0-5

Use tmleNews() to see details on changes and bug fixes
> library(tmleAb)
Welcome to the tmleAb package
Targeted maximum likelihood estimation for antibody measurements.
(Version 0.3.2, release date 2017-07-21)

Periodically check for the latest development version using 
devtools::install_github('ben-arnold/tmleAb')  

This software is based on work funded by the
National Institute of Allergy and Infectious Diseases
grant K01-AI119180


> 
> #--------------------------------
> # load the gaussian mixture model
> # results for seropositive cutoffs
> #--------------------------------
> load(file="~/dropbox/coastalkenya/results/raw/coastal-mixtures.RData")
> 
> 
> #--------------------------------
> # load the formatted dataset
> #--------------------------------
> load("~/dropbox/coastalkenya/data/final/coastal_kenya.RData")
> d <- coastal_kenya
> 
> 
> #--------------------------------
> # identify seropositive individuals
> #--------------------------------
> d$pcsp    <- ifelse(d$csp>cspmixcut,1,0)
> d$pmsp1pf <- ifelse(d$msp1pf>pfmixcut,1,0)
> d$pmsp1pm <- ifelse(d$msp1pm>pmmixcut,1,0)
> 
> #--------------------------------
> # set negative and zero values to
> # 1 before the log transform
> #--------------------------------
> # csp (all >0)
> table(d$msp1pf<=0)

FALSE  TRUE 
 2833     4 
> d["msp1pf"][d["msp1pf"]<=0] <-1
> # msp1pm (all >0)
> 
> #--------------------------------
> # summarize antibody curves
> # by community
> #--------------------------------
> 
> # ensemble library
> SL.library <-  c("SL.mean", "SL.glm", "SL.gam", "SL.loess")
> 
> 
> set.seed(1234)
> csp_curves <- lapply(1:10,
+                        FUN = function(x) {
+                          agecurveAb(Y=log10(d$csp[d$community==x]),
+                                     Age=d$age[d$community==x],
+                                     SL.library=SL.library,
+                                     gamdf=2:6
+                                     )
+                        }
+                        )
Loading required package: gam
Loading required package: splines
Loading required package: foreach
Loaded gam 1.14


Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk Coef
SL.mean_All    0.7682451    0
SL.glm_All     0.5844199    0
SL.gam.df6_All 0.5316253    1
SL.loess_All   0.5361970    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk        Coef
SL.mean_All    0.4897759 0.006088229
SL.glm_All     0.3601369 0.254129637
SL.gam.df2_All 0.3554837 0.000000000
SL.loess_All   0.3538806 0.739782134

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.2702419 0.04362686
SL.glm_All     0.2453518 0.37101931
SL.gam.df4_All 0.2450012 0.00000000
SL.loess_All   0.2443314 0.58535383

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk        Coef
SL.mean_All    0.8433533 0.005660922
SL.glm_All     0.3933300 0.017597587
SL.gam.df6_All 0.3038936 0.000000000
SL.loess_All   0.3026313 0.976741491

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.8801225 0.02637197
SL.glm_All     0.5112948 0.00735453
SL.gam.df6_All 0.3922993 0.00000000
SL.loess_All   0.3901475 0.96627350

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.8997532 0.01332950
SL.glm_All     0.5327395 0.01859044
SL.gam.df5_All 0.3856828 0.34854802
SL.loess_All   0.3859640 0.61953204

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk Coef
SL.mean_All    0.9649907    0
SL.glm_All     0.5867060    0
SL.gam.df4_All 0.4296050    1
SL.loess_All   0.4364469    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk        Coef
SL.mean_All    0.4958273 0.001185513
SL.glm_All     0.3182045 0.089230434
SL.gam.df3_All 0.2946097 0.363413776
SL.loess_All   0.2951079 0.546170277

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk         Coef
SL.mean_All    0.8362600 0.0002720193
SL.glm_All     0.4172806 0.0433275788
SL.gam.df5_All 0.3323140 0.2772701225
SL.loess_All   0.3324887 0.6791302794

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All    0.08906882 0.01404069
SL.glm_All     0.07818650 0.53830820
SL.gam.df5_All 0.07833446 0.44765111
SL.loess_All   0.07843115 0.00000000
> 
> set.seed(1234)
> msp1pf_curves <- lapply(1:10,
+                       FUN = function(x) {
+                         agecurveAb(Y=log10(d$msp1pf[d$community==x]),
+                                    Age=d$age[d$community==x],
+                                    SL.library=SL.library,
+                                    gamdf=2:6
+                         )
+                       }
+                       )

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.8142425 0.04747142
SL.glm_All     0.7467897 0.13562257
SL.gam.df5_All 0.7349231 0.00000000
SL.loess_All   0.7334313 0.81690601

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    1.5004869 0.00000000
SL.glm_All     0.8440535 0.04041079
SL.gam.df6_All 0.7613857 0.95958921
SL.loess_All   0.7792778 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    1.2647833 0.01151423
SL.glm_All     0.9058618 0.00000000
SL.gam.df4_All 0.7265442 0.02971236
SL.loess_All   0.7217512 0.95877341

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                CV-Risk       Coef
SL.mean_All    1.499577 0.02406053
SL.glm_All     1.409123 0.24889243
SL.gam.df5_All 1.380382 0.00000000
SL.loess_All   1.379600 0.72704704

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                CV-Risk      Coef
SL.mean_All    1.209811 0.1137509
SL.glm_All     1.118429 0.0000000
SL.gam.df5_All 1.054777 0.4927908
SL.loess_All   1.054442 0.3934583

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk      Coef
SL.mean_All    1.0737453 0.0354885
SL.glm_All     0.9959932 0.2841894
SL.gam.df5_All 0.9893756 0.0000000
SL.loess_All   0.9838331 0.6803221

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                CV-Risk       Coef
SL.mean_All    1.163201 0.01601846
SL.glm_All     1.103691 0.00000000
SL.gam.df2_All 1.085125 0.53100945
SL.loess_All   1.086186 0.45297209

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                CV-Risk      Coef
SL.mean_All    1.472382 0.0000000
SL.glm_All     1.411199 0.4889636
SL.gam.df5_All 1.412448 0.0000000
SL.loess_All   1.410359 0.5110364

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                CV-Risk       Coef
SL.mean_All    1.444280 0.01900613
SL.glm_All     1.305347 0.00000000
SL.gam.df2_All 1.295845 0.59340122
SL.loess_All   1.299546 0.38759265

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.7766319 0.01092906
SL.glm_All     0.6293295 0.98907094
SL.gam.df3_All 0.6325450 0.00000000
SL.loess_All   0.6348173 0.00000000
> 
> set.seed(1234)
> msp1pm_curves <- lapply(1:10,
+                       FUN = function(x) {
+                         agecurveAb(Y=log10(d$msp1pm[d$community==x]),
+                                    Age=d$age[d$community==x],
+                                    SL.library=SL.library,
+                                    gamdf=2:6
+                         )
+                       }
+                       )

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.8794340 0.01417236
SL.glm_All     0.7336452 0.02363097
SL.gam.df5_All 0.7207796 0.69164004
SL.loess_All   0.7218946 0.27055663

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk        Coef
SL.mean_All    0.4614999 0.002847559
SL.glm_All     0.4050652 0.000000000
SL.gam.df3_All 0.3718059 0.794632185
SL.loess_All   0.3727746 0.202520256

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk      Coef
SL.mean_All    0.1878598 0.1142653
SL.glm_All     0.1787046 0.3322895
SL.gam.df4_All 0.1777199 0.0000000
SL.loess_All   0.1779570 0.5534452

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk        Coef
SL.mean_All    0.8062338 0.007736403
SL.glm_All     0.5618105 0.010463261
SL.gam.df3_All 0.5439595 0.938028404
SL.loess_All   0.5473241 0.043771932

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.6998178 0.02335289
SL.glm_All     0.5534218 0.00000000
SL.gam.df5_All 0.4951221 0.97664711
SL.loess_All   0.4980748 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.7686790 0.02002236
SL.glm_All     0.6212185 0.00000000
SL.gam.df3_All 0.5912699 0.74315468
SL.loess_All   0.5942131 0.23682296

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.8048308 0.00000000
SL.glm_All     0.6091539 0.09367976
SL.gam.df5_All 0.5782655 0.14438631
SL.loess_All   0.5766108 0.76193393

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.4739142 0.01753485
SL.glm_All     0.3571660 0.36504782
SL.gam.df4_All 0.3525939 0.00000000
SL.loess_All   0.3510042 0.61741733

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.5697215 0.02243413
SL.glm_All     0.4025563 0.19448284
SL.gam.df4_All 0.3991465 0.78308303
SL.loess_All   0.4013095 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.1358621 0.05971689
SL.glm_All     0.1303441 0.30930772
SL.gam.df4_All 0.1300007 0.00000000
SL.loess_All   0.1299709 0.63097539
> 
> #--------------------------------
> # Estmiate village-level mean 
> # Ab levels EY_x
> #--------------------------------
> 
> # CSP
> set.seed(1234)
> cspEYx <- lapply(1:10,FUN = function(x) {
+   tmleAb(Y=log10(d$csp[d$community==x]),
+          W=data.frame(Age=d[d$community==x,c("age")]),
+          SL.library=SL.library,gamdf=2:6)
+ })
 Population Mean
   Parameter Estimate:  3.3722
   Estimated Variance:  0.0028251
              p-value:  <2e-16
    95% Conf Interval: (3.268, 3.4764) 
 Population Mean
   Parameter Estimate:  2.3789
   Estimated Variance:  0.001807
              p-value:  <2e-16
    95% Conf Interval: (2.2956, 2.4622) 
 Population Mean
   Parameter Estimate:  2.0226
   Estimated Variance:  0.00095322
              p-value:  <2e-16
    95% Conf Interval: (1.9621, 2.0832) 
 Population Mean
   Parameter Estimate:  2.708
   Estimated Variance:  0.0028845
              p-value:  <2e-16
    95% Conf Interval: (2.6027, 2.8132) 
 Population Mean
   Parameter Estimate:  2.763
   Estimated Variance:  0.0030537
              p-value:  <2e-16
    95% Conf Interval: (2.6547, 2.8713) 
 Population Mean
   Parameter Estimate:  2.8159
   Estimated Variance:  0.0031726
              p-value:  <2e-16
    95% Conf Interval: (2.7055, 2.9263) 
 Population Mean
   Parameter Estimate:  2.8644
   Estimated Variance:  0.0032948
              p-value:  <2e-16
    95% Conf Interval: (2.7519, 2.9769) 
 Population Mean
   Parameter Estimate:  2.3799
   Estimated Variance:  0.0017624
              p-value:  <2e-16
    95% Conf Interval: (2.2976, 2.4622) 
 Population Mean
   Parameter Estimate:  2.6731
   Estimated Variance:  0.0029093
              p-value:  <2e-16
    95% Conf Interval: (2.5673, 2.7788) 
 Population Mean
   Parameter Estimate:  1.8704
   Estimated Variance:  0.0002952
              p-value:  <2e-16
    95% Conf Interval: (1.8367, 1.904) 
> 
> # Pf MSP-1
> set.seed(1234)
> msp1pfEYx <- lapply(1:10,FUN = function(x) {
+   tmleAb(Y=log10(d$msp1pf[d$community==x]),
+          W=data.frame(Age=d[d$community==x,c("age")]),
+          SL.library=SL.library,gamdf=2:6)
+ })
 Population Mean
   Parameter Estimate:  3.7712
   Estimated Variance:  0.003004
              p-value:  <2e-16
    95% Conf Interval: (3.6638, 3.8787) 
 Population Mean
   Parameter Estimate:  2.6917
   Estimated Variance:  0.0055394
              p-value:  <2e-16
    95% Conf Interval: (2.5458, 2.8375) 
 Population Mean
   Parameter Estimate:  2.0483
   Estimated Variance:  0.0044496
              p-value:  <2e-16
    95% Conf Interval: (1.9176, 2.1791) 
 Population Mean
   Parameter Estimate:  3.2951
   Estimated Variance:  0.0051489
              p-value:  <2e-16
    95% Conf Interval: (3.1544, 3.4357) 
 Population Mean
   Parameter Estimate:  3.4185
   Estimated Variance:  0.0042078
              p-value:  <2e-16
    95% Conf Interval: (3.2913, 3.5456) 
 Population Mean
   Parameter Estimate:  3.4884
   Estimated Variance:  0.0037928
              p-value:  <2e-16
    95% Conf Interval: (3.3677, 3.6091) 
 Population Mean
   Parameter Estimate:  3.3696
   Estimated Variance:  0.0039984
              p-value:  <2e-16
    95% Conf Interval: (3.2457, 3.4935) 
 Population Mean
   Parameter Estimate:  2.9889
   Estimated Variance:  0.0052357
              p-value:  <2e-16
    95% Conf Interval: (2.8471, 3.1307) 
 Population Mean
   Parameter Estimate:  3.045
   Estimated Variance:  0.0049993
              p-value:  <2e-16
    95% Conf Interval: (2.9064, 3.1836) 
 Population Mean
   Parameter Estimate:  1.8334
   Estimated Variance:  0.0025949
              p-value:  <2e-16
    95% Conf Interval: (1.7336, 1.9333) 
> 
> # Pm MSP-1
> set.seed(1234)
> msp1pmEYx <- lapply(1:10,FUN = function(x) {
+   tmleAb(Y=log10(d$msp1pm[d$community==x]),
+          W=data.frame(Age=d[d$community==x,c("age")]),
+          SL.library=SL.library,gamdf=2:6)
+ })
 Population Mean
   Parameter Estimate:  2.8188
   Estimated Variance:  0.0032446
              p-value:  <2e-16
    95% Conf Interval: (2.7071, 2.9304) 
 Population Mean
   Parameter Estimate:  1.9811
   Estimated Variance:  0.0017011
              p-value:  <2e-16
    95% Conf Interval: (1.9003, 2.062) 
 Population Mean
   Parameter Estimate:  1.5378
   Estimated Variance:  0.00065984
              p-value:  <2e-16
    95% Conf Interval: (1.4874, 1.5881) 
 Population Mean
   Parameter Estimate:  2.1204
   Estimated Variance:  0.0027625
              p-value:  <2e-16
    95% Conf Interval: (2.0174, 2.2234) 
 Population Mean
   Parameter Estimate:  1.8987
   Estimated Variance:  0.002436
              p-value:  <2e-16
    95% Conf Interval: (1.8019, 1.9954) 
 Population Mean
   Parameter Estimate:  2.037
   Estimated Variance:  0.0027236
              p-value:  <2e-16
    95% Conf Interval: (1.9347, 2.1393) 
 Population Mean
   Parameter Estimate:  2.0738
   Estimated Variance:  0.0027544
              p-value:  <2e-16
    95% Conf Interval: (1.9709, 2.1767) 
 Population Mean
   Parameter Estimate:  1.8494
   Estimated Variance:  0.0016769
              p-value:  <2e-16
    95% Conf Interval: (1.7691, 1.9297) 
 Population Mean
   Parameter Estimate:  2.062
   Estimated Variance:  0.0019657
              p-value:  <2e-16
    95% Conf Interval: (1.9751, 2.1489) 
 Population Mean
   Parameter Estimate:  1.5071
   Estimated Variance:  0.00045221
              p-value:  <2e-16
    95% Conf Interval: (1.4654, 1.5488) 
> 
> #--------------------------------
> # pull out means, lb and ub
> # from the TMLE fitted objects
> #--------------------------------
> getpsi <- function(x) {
+   ests <- sapply(x, function(xx) c(xx$psi,xx$lb,xx$ub))
+   rownames(ests) <- c("psi","lb","ub") 
+   colnames(ests) <- 1:10
+   return(ests)
+ }
> 
> cspEYxs     <- getpsi(cspEYx)
> msp1pfEYxs  <- getpsi(msp1pfEYx)
> msp1pmEYxs  <- getpsi(msp1pmEYx)
> 
> 
> 
> #--------------------------------
> # seroprevalence curves
> # by community
> #--------------------------------
> 
> 
> set.seed(1234)
> pcsp_curves <- lapply(1:10,
+                      FUN = function(x) {
+                        agecurveAb(Y=d$pcsp[d$community==x],
+                                   Age=d$age[d$community==x],
+                                   SL.library=SL.library,
+                                   gamdf=2:6
+                        )
+                      }
+                      )

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk Coef
SL.mean_All    0.1776121    0
SL.glm_All     0.1544454    0
SL.gam.df6_All 0.1407138    1
SL.loess_All   0.1417988    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.2187423 0.00245087
SL.glm_All     0.1827289 0.53810625
SL.gam.df2_All 0.1821921 0.00000000
SL.loess_All   0.1830992 0.45944288

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.1114399 0.04410397
SL.glm_All     0.1067692 0.95589603
SL.gam.df2_All 0.1071311 0.00000000
SL.loess_All   0.1088710 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk Coef
SL.mean_All    0.25174184    0
SL.glm_All     0.12603256    0
SL.gam.df6_All 0.08523440    1
SL.loess_All   0.08620496    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk        Coef
SL.mean_All    0.2521399 0.006794369
SL.glm_All     0.1496725 0.000000000
SL.gam.df6_All 0.1123563 0.357315628
SL.loess_All   0.1122654 0.635890003

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk        Coef
SL.mean_All    0.2508274 0.003429555
SL.glm_All     0.1726758 0.000000000
SL.gam.df6_All 0.1326091 0.119025611
SL.loess_All   0.1322972 0.877544834

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk Coef
SL.mean_All    0.2482142    0
SL.glm_All     0.1530689    0
SL.gam.df4_All 0.1234457    1
SL.loess_All   0.1240206    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.2300217 0.02466166
SL.glm_All     0.1731976 0.04898311
SL.gam.df6_All 0.1608557 0.00000000
SL.loess_All   0.1579699 0.92635523

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk Coef
SL.mean_All    0.25059871    0
SL.glm_All     0.12931399    0
SL.gam.df6_All 0.09903889    1
SL.loess_All   0.10176195    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk     Coef
SL.mean_All    0.02647043 0.311971
SL.glm_All     0.02640436 0.688029
SL.gam.df2_All 0.02700699 0.000000
SL.loess_All   0.02765651 0.000000
> 
> set.seed(1234)
> pmsp1pf_curves <- lapply(1:10,
+                         FUN = function(x) {
+                           agecurveAb(Y=d$pmsp1pf[d$community==x],
+                                      Age=d$age[d$community==x],
+                                      SL.library=SL.library,
+                                      gamdf=2:6
+                           )
+                         }
+                         )

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.1157965 0.07172758
SL.glm_All     0.1116365 0.01907376
SL.gam.df5_All 0.1095255 0.00000000
SL.loess_All   0.1090013 0.90919866

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk      Coef
SL.mean_All    0.2520757 0.0000000
SL.glm_All     0.1588040 0.0696265
SL.gam.df6_All 0.1475343 0.9303735
SL.loess_All   0.1495749 0.0000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk      Coef
SL.mean_All    0.2074722 0.0000000
SL.glm_All     0.1705020 0.0000000
SL.gam.df4_All 0.1495576 0.5377358
SL.loess_All   0.1497862 0.4622642

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.2237172 0.03652823
SL.glm_All     0.2124946 0.43387964
SL.gam.df6_All 0.2128431 0.00000000
SL.loess_All   0.2120849 0.52959213

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk     Coef
SL.mean_All    0.1776940 0.106249
SL.glm_All     0.1698321 0.000000
SL.gam.df5_All 0.1626444 0.188593
SL.loess_All   0.1623014 0.705158

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.1897122 0.05228383
SL.glm_All     0.1795931 0.15352197
SL.gam.df5_All 0.1760137 0.00000000
SL.loess_All   0.1752108 0.79419420

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk      Coef
SL.mean_All    0.2020464 0.0757431
SL.glm_All     0.1988478 0.3026856
SL.gam.df6_All 0.1996077 0.0000000
SL.loess_All   0.1973690 0.6215713

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.2464963 0.03088810
SL.glm_All     0.2419598 0.28961566
SL.gam.df5_All 0.2403971 0.64460289
SL.loess_All   0.2412317 0.03489336

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk      Coef
SL.mean_All    0.2409752 0.0617183
SL.glm_All     0.2320456 0.6768235
SL.gam.df2_All 0.2319443 0.0000000
SL.loess_All   0.2342361 0.2614582

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk         Coef
SL.mean_All    0.1317569 6.147079e-05
SL.glm_All     0.1177502 9.999385e-01
SL.gam.df2_All 0.1182325 0.000000e+00
SL.loess_All   0.1195838 0.000000e+00
> 
> set.seed(1234)
> pmsp1pm_curves <- lapply(1:10,
+                         FUN = function(x) {
+                           agecurveAb(Y=d$pmsp1pm[d$community==x],
+                                      Age=d$age[d$community==x],
+                                      SL.library=SL.library,
+                                      gamdf=2:6
+                           )
+                         }
+                         )

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.2314835 0.00207471
SL.glm_All     0.2063507 0.00000000
SL.gam.df6_All 0.2010856 0.99792529
SL.loess_All   0.2024523 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk        Coef
SL.mean_All    0.2083696 0.004265899
SL.glm_All     0.1923326 0.056691566
SL.gam.df3_All 0.1802004 0.000000000
SL.loess_All   0.1796227 0.939042534

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All    0.04428782 0.34943755
SL.glm_All     0.04409967 0.62531746
SL.gam.df2_All 0.04446487 0.00000000
SL.loess_All   0.04510113 0.02524499

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk     Coef
SL.mean_All    0.2169466 0.000000
SL.glm_All     0.1593628 0.482228
SL.gam.df5_All 0.1596243 0.000000
SL.loess_All   0.1591286 0.517772

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.1936715 0.04202983
SL.glm_All     0.1690074 0.00000000
SL.gam.df2_All 0.1646417 0.00000000
SL.loess_All   0.1626037 0.95797017

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.2284738 0.01709184
SL.glm_All     0.2023637 0.09411246
SL.gam.df5_All 0.1955591 0.86206094
SL.loess_All   0.1974105 0.02673476

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk      Coef
SL.mean_All    0.2115647 0.0000000
SL.glm_All     0.1539862 0.4875892
SL.gam.df3_All 0.1545275 0.0000000
SL.loess_All   0.1538982 0.5124108

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk      Coef
SL.mean_All    0.1782533 0.0174498
SL.glm_All     0.1553570 0.3871793
SL.gam.df4_All 0.1547267 0.0000000
SL.loess_All   0.1537490 0.5953709

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk      Coef
SL.mean_All    0.2150362 0.0000000
SL.glm_All     0.1641075 0.3393454
SL.gam.df6_All 0.1635600 0.6606546
SL.loess_All   0.1667438 0.0000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk      Coef
SL.mean_All    0.04228273 0.2195236
SL.glm_All     0.04245204 0.0000000
SL.gam.df6_All 0.04173831 0.7804764
SL.loess_All   0.04223716 0.0000000
> 
> 
> #--------------------------------
> # estimate mean seroprevalence, 
> # stratified by community
> #--------------------------------
> 
> # CSP
> set.seed(1234)
> pcspEYx <- lapply(1:10,FUN = function(x) {
+   tmleAb(Y=d$pcsp[d$community==x],
+          W=data.frame(Age=d[d$community==x,c("age")]),
+          SL.library=SL.library,gamdf=2:6)
+          })
 Population Mean
   Parameter Estimate:  0.77122
   Estimated Variance:  0.00065349
              p-value:  <2e-16
    95% Conf Interval: (0.72111, 0.82132) 
 Population Mean
   Parameter Estimate:  0.31599
   Estimated Variance:  0.00080649
              p-value:  <2e-16
    95% Conf Interval: (0.26032, 0.37165) 
 Population Mean
   Parameter Estimate:  0.12721
   Estimated Variance:  0.00039371
              p-value:  1.4455e-10
    95% Conf Interval: (0.088318, 0.1661) 
 Population Mean
   Parameter Estimate:  0.47766
   Estimated Variance:  0.00086035
              p-value:  <2e-16
    95% Conf Interval: (0.42017, 0.53515) 
 Population Mean
   Parameter Estimate:  0.4878
   Estimated Variance:  0.00087361
              p-value:  <2e-16
    95% Conf Interval: (0.42987, 0.54574) 
 Population Mean
   Parameter Estimate:  0.5461
   Estimated Variance:  0.00088212
              p-value:  <2e-16
    95% Conf Interval: (0.48789, 0.60431) 
 Population Mean
   Parameter Estimate:  0.56207
   Estimated Variance:  0.00085172
              p-value:  <2e-16
    95% Conf Interval: (0.50487, 0.61927) 
 Population Mean
   Parameter Estimate:  0.35357
   Estimated Variance:  0.00081921
              p-value:  <2e-16
    95% Conf Interval: (0.29747, 0.40967) 
 Population Mean
   Parameter Estimate:  0.46341
   Estimated Variance:  0.00086945
              p-value:  <2e-16
    95% Conf Interval: (0.40562, 0.52121) 
 Population Mean
   Parameter Estimate:  0.026936
   Estimated Variance:  8.8549e-05
              p-value:  0.0042034
    95% Conf Interval: (0.0084923, 0.04538) 
> 
> # MSP-1 Pf
> set.seed(1234)
> pmsp1pfEYx <- lapply(1:10,FUN = function(x) {
+   tmleAb(Y=d$pmsp1pf[d$community==x],
+          W=data.frame(Age=d[d$community==x,c("age")]),
+          SL.library=SL.library,gamdf=2:6)
+   })
 Population Mean
   Parameter Estimate:  0.86716
   Estimated Variance:  0.00042665
              p-value:  <2e-16
    95% Conf Interval: (0.82667, 0.90764) 
 Population Mean
   Parameter Estimate:  0.52416
   Estimated Variance:  0.00093066
              p-value:  <2e-16
    95% Conf Interval: (0.46437, 0.58396) 
 Population Mean
   Parameter Estimate:  0.28975
   Estimated Variance:  0.00072977
              p-value:  <2e-16
    95% Conf Interval: (0.2368, 0.3427) 
 Population Mean
   Parameter Estimate:  0.66667
   Estimated Variance:  0.00076628
              p-value:  <2e-16
    95% Conf Interval: (0.61241, 0.72092) 
 Population Mean
   Parameter Estimate:  0.77003
   Estimated Variance:  0.00061916
              p-value:  <2e-16
    95% Conf Interval: (0.72126, 0.81881) 
 Population Mean
   Parameter Estimate:  0.74823
   Estimated Variance:  0.0006704
              p-value:  <2e-16
    95% Conf Interval: (0.69748, 0.79898) 
 Population Mean
   Parameter Estimate:  0.72069
   Estimated Variance:  0.00069653
              p-value:  <2e-16
    95% Conf Interval: (0.66896, 0.77242) 
 Population Mean
   Parameter Estimate:  0.575
   Estimated Variance:  0.0008759
              p-value:  <2e-16
    95% Conf Interval: (0.51699, 0.63301) 
 Population Mean
   Parameter Estimate:  0.60627
   Estimated Variance:  0.00083464
              p-value:  <2e-16
    95% Conf Interval: (0.54965, 0.6629) 
 Population Mean
   Parameter Estimate:  0.15488
   Estimated Variance:  0.00044221
              p-value:  1.7681e-13
    95% Conf Interval: (0.11367, 0.1961) 
> 
> # MSP-1 Pm
> set.seed(1234)
> pmsp1pmEYx <- lapply(1:10,FUN = function(x) {
+   tmleAb(Y=d$pmsp1pm[d$community==x],
+          W=data.frame(Age=d[d$community==x,c("age")]),
+          SL.library=SL.library,gamdf=2:6)
+   })
 Population Mean
   Parameter Estimate:  0.64207
   Estimated Variance:  0.00085117
              p-value:  <2e-16
    95% Conf Interval: (0.58488, 0.69925) 
 Population Mean
   Parameter Estimate:  0.28996
   Estimated Variance:  0.00076823
              p-value:  <2e-16
    95% Conf Interval: (0.23564, 0.34429) 
 Population Mean
   Parameter Estimate:  0.045936
   Estimated Variance:  0.00015541
              p-value:  0.00022888
    95% Conf Interval: (0.021502, 0.070371) 
 Population Mean
   Parameter Estimate:  0.31271
   Estimated Variance:  0.00074112
              p-value:  <2e-16
    95% Conf Interval: (0.25936, 0.36607) 
 Population Mean
   Parameter Estimate:  0.26132
   Estimated Variance:  0.00067494
              p-value:  <2e-16
    95% Conf Interval: (0.2104, 0.31224) 
 Population Mean
   Parameter Estimate:  0.35106
   Estimated Variance:  0.00081074
              p-value:  <2e-16
    95% Conf Interval: (0.29526, 0.40687) 
 Population Mean
   Parameter Estimate:  0.3
   Estimated Variance:  0.00072664
              p-value:  <2e-16
    95% Conf Interval: (0.24717, 0.35283) 
 Population Mean
   Parameter Estimate:  0.22857
   Estimated Variance:  0.00063199
              p-value:  <2e-16
    95% Conf Interval: (0.1793, 0.27784) 
 Population Mean
   Parameter Estimate:  0.30314
   Estimated Variance:  0.00073862
              p-value:  <2e-16
    95% Conf Interval: (0.24987, 0.3564) 
 Population Mean
   Parameter Estimate:  0.043771
   Estimated Variance:  0.0001414
              p-value:  0.00023238
    95% Conf Interval: (0.020464, 0.067078) 
> 
> 
> #--------------------------------
> # calculate differences in means
> # between Jaribuni and other
> # communities in Kalifi county
> # and Ndau and Kipini compared with
> # others for P-value reporting
> # differences are all highly significant
> # based on estimates and SEs, but this
> # is just a way to get a formal P-value
> # (requested by co-authors)
> #--------------------------------
> 
> # Jaribuni
> jaribuni01 <- ifelse(d$cname=='Jaribuni',1,0)
> jdiffcsppf <- tmleAb(Y=d$pcsp[d$county=='Kilifi'],
+                       X=jaribuni01[d$county=='Kilifi'],
+                       W=data.frame(Age=d[d$county=='Kilifi',c("age")]),
+                       SL.library=SL.library,gamdf=2:6)
 Additive Effect
   Parameter Estimate:  0.28729
   Estimated Variance:  0.00080042
              p-value:  <2e-16
    95% Conf Interval: (0.23184, 0.34275) 
> 
> jdiffmsp1pf <- tmleAb(Y=d$pmsp1pf[d$county=='Kilifi'],
+                      X=jaribuni01[d$county=='Kilifi'],
+                      W=data.frame(Age=d[d$county=='Kilifi',c("age")]),
+                      SL.library=SL.library,gamdf=2:6)
 Additive Effect
   Parameter Estimate:  0.2291
   Estimated Variance:  0.00078455
              p-value:  2.8531e-16
    95% Conf Interval: (0.1742, 0.284) 
> 
> jdiffmsp1pf <- tmleAb(Y=d$pmsp1pm[d$county=='Kilifi'],
+                       X=jaribuni01[d$county=='Kilifi'],
+                       W=data.frame(Age=d[d$county=='Kilifi',c("age")]),
+                       SL.library=SL.library,gamdf=2:6)
 Additive Effect
   Parameter Estimate:  0.32806
   Estimated Variance:  0.0010424
              p-value:  <2e-16
    95% Conf Interval: (0.26478, 0.39134) 
> 
> # Ndau
> ndau01 <- ifelse(d$cname=='Ndau',1,0)
> ndiffcsppf <- tmleAb(Y=d$pcsp,
+                      X=ndau01,
+                      W=data.frame(Age=d[c("age")]),
+                      SL.library=SL.library,gamdf=2:6)
 Additive Effect
   Parameter Estimate:  -0.44546
   Estimated Variance:  0.0001453
              p-value:  <2e-16
    95% Conf Interval: (-0.46909, -0.42184) 
> 
> ndiffmsp1pf <- tmleAb(Y=d$pmsp1pf,
+                       X=ndau01,
+                       W=data.frame(Age=d[c("age")]),
+                       SL.library=SL.library,gamdf=2:6)
 Additive Effect
   Parameter Estimate:  -0.53102
   Estimated Variance:  0.00034555
              p-value:  <2e-16
    95% Conf Interval: (-0.56746, -0.49459) 
> 
> ndiffmsp1pf <- tmleAb(Y=d$pmsp1pm,
+                       X=ndau01,
+                       W=data.frame(Age=d[c("age")]),
+                       SL.library=SL.library,gamdf=2:6)
 Additive Effect
   Parameter Estimate:  -0.26618
   Estimated Variance:  0.00024217
              p-value:  <2e-16
    95% Conf Interval: (-0.29668, -0.23568) 
> # Kipini
> kipini01 <- ifelse(d$cname=='Kipini',1,0)
> kdiffcsppf <- tmleAb(Y=d$pcsp,
+                      X=kipini01,
+                      W=data.frame(Age=d[c("age")]),
+                      SL.library=SL.library,gamdf=2:6)
 Additive Effect
   Parameter Estimate:  -0.34138
   Estimated Variance:  0.00041674
              p-value:  <2e-16
    95% Conf Interval: (-0.38139, -0.30137) 
> 
> kdiffmsp1pf <- tmleAb(Y=d$pmsp1pf,
+                       X=kipini01,
+                       W=data.frame(Age=d[c("age")]),
+                       SL.library=SL.library,gamdf=2:6)
 Additive Effect
   Parameter Estimate:  -0.36872
   Estimated Variance:  0.00061026
              p-value:  <2e-16
    95% Conf Interval: (-0.41714, -0.3203) 
> 
> kdiffmsp1pf <- tmleAb(Y=d$pmsp1pm,
+                       X=kipini01,
+                       W=data.frame(Age=d[c("age")]),
+                       SL.library=SL.library,gamdf=2:6)
 Additive Effect
   Parameter Estimate:  -0.26334
   Estimated Variance:  0.00020942
              p-value:  <2e-16
    95% Conf Interval: (-0.2917, -0.23497) 
> 
> 
> #--------------------------------
> # pull out means, lb and ub
> # from the TMLE fitted objects
> #--------------------------------
> pcspEYxs   <- getpsi(pcspEYx)
> pmsp1pfEYxs <- getpsi(pmsp1pfEYx)
> pmsp1pmEYxs <- getpsi(pmsp1pmEYx)
> 
> 
> #--------------------------------
> # save results
> #--------------------------------
> save.image(file="~/dropbox/coastalkenya/results/raw/coastal-malaria.RData")
> 
> 
> 
> proc.time()
   user  system elapsed 
177.964   2.264 182.362 
